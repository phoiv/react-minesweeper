[{"C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\index.js":"1","C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\App.js":"2","C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\reportWebVitals.js":"3","C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\containers\\Minesweeper\\Minesweeper.js":"4","C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\components\\GameHeader\\GameHeader.js":"5","C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\components\\GameBoard\\GameBoard.js":"6","C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\components\\GameBoard\\Square\\Square.js":"7","C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\components\\Settings\\Settings.js":"8"},{"size":510,"mtime":1609163046062,"results":"9","hashOfConfig":"10"},{"size":471,"mtime":1609167055574,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":9929,"mtime":1616953153006,"results":"13","hashOfConfig":"10"},{"size":378,"mtime":1616953070275,"results":"14","hashOfConfig":"10"},{"size":1065,"mtime":1610629097983,"results":"15","hashOfConfig":"10"},{"size":3004,"mtime":1616947514668,"results":"16","hashOfConfig":"10"},{"size":2530,"mtime":1616953208007,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"lfjdw8",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\index.js",[],["36","37"],"C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\App.js",[],"C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\reportWebVitals.js",[],"C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\containers\\Minesweeper\\Minesweeper.js",["38","39","40","41","42","43","44","45","46","47","48","49"],"import classes from './Minesweeper.module.css';\nimport GameHeader from '../../components/GameHeader/GameHeader.js'\nimport GameBoard from '../../components/GameBoard/GameBoard.js'\nimport Settings from '../../components/Settings/Settings.js'\nimport { useEffect, useState, useRef } from 'react';\n\n// const conf = {\n//     beginner: [9, 9, 10],\n//     intermediate: [16, 16, 40],\n//     expert: [16, 30, 99],\n//     custom: [null, null, null],\n// }\nconst conf = {\n    'beginner': { width: 9, height: 9, mines: 10 },\n    'intermediate': { width: 16, height: 16, mines: 40 },\n    'expert': { width: 16, height: 30, mines: 99 },\n    'custom': [null, null, null],\n}\n\n\nfunction Minesweeper() {\n    const [gameConfig, setConf] = useState({\n        width: 12,\n        height: 10,\n        mines: 10\n    });\n    const [board, setBoard] = useState(() => generateBoard(gameConfig.width, gameConfig.height, gameConfig.mines))\n    const [gameState, setGameState] = useState(\"ready\") //lost/won/ready/playing\n    const [opened, setOpened] = useState(0)\n    const [flagged, setFlagged] = useState(0)\n    const [timer, setTimer] = useState(0)\n    const [settingsOpen, setSettingsOpen] = useState(false);\n\n    const minesweeperBoard = useRef(null);\n    //the goal of the game is to open all non bombs squares\n    const target = gameConfig.width * gameConfig.height - gameConfig.mines;\n    console.log('target===', target)\n\n    //we want to catch right click on the board and disable it\n    useEffect(() => {\n        minesweeperBoard.current.addEventListener(\"contextmenu\", (evt) => flagHandler(evt, null))\n\n    }, [])\n\n    useEffect(() => {\n        if (gameState === \"running\") {\n            let id = setInterval(function () {\n                setTimer(timer => timer + 1)\n            }\n                , 1000);\n            return () => clearInterval(id)\n        }\n    }, [gameState])\n\n    useEffect(() => {\n        if (opened === target)\n            gameWon()\n    }, [opened])\n\n    // useEffect(() => {\n    //     console.log(\"hihi\")\n    //     const newBoard = generateBoard(gameConfig.width, gameConfig.height, gameConfig.mines);\n    //     setBoard(newBoard)\n\n    // }, [gameConfig])\n\n    const flagHandler = (evt, tilePos) => {\n        evt.preventDefault();\n        console.log(\"RIGHT CLICKED\", tilePos)\n        //do nothing for rc on board\n        if (!tilePos && tilePos != 0) return;\n        if (board[tilePos].isOpen) return;\n        if (gameState === 'won' || gameState === 'lost') return;\n        if (board[tilePos].isFlagged) setFlagged(flagged => flagged - 1)\n        if (!board[tilePos].isFlagged) setFlagged(flagged => flagged + 1)\n\n        const newBoard = [...board];\n        newBoard[tilePos].isFlagged = !newBoard[tilePos].isFlagged;\n        setBoard(newBoard)\n    }\n\n    const revealTileHandler = (tilePos) => {\n        if (board[tilePos].isFlagged) return;\n        if (board[tilePos].content === -1) {\n            gameLost(tilePos);\n            return;\n        }\n\n        if (gameState === \"ready\") setGameState(\"running\")\n        if (gameState === 'won' || gameState === 'lost') return;\n\n        const newBoard = [...board];\n        newBoard[tilePos].isOpen = true;\n        setBoard(newBoard)\n        setOpened((opened) => opened + 1)\n        if (newBoard[tilePos].content === 0)\n            newBoard[tilePos].neighbours.forEach(tile => {\n                if (!newBoard[tile].isOpen)\n                    revealTileHandler(tile)\n            })\n\n        //check win condition\n\n    }\n\n    function gameLost(boom) {\n\n        //we use content -10 and -2 for extra styling options\n        //-2 is thew bomb we opened and lost the game\n        //-10 are the squares we had flagged as bombs but were safe\n        const newBoard = [...board];\n        newBoard.forEach(tile => {\n            if (tile.content === -1 && !tile.isFlagged)\n                tile.isOpen = true;\n            //flagged non-bomb\n            if (tile.isFlagged && tile.content !== -1) {\n                tile.isOpen = true;\n                tile.isFlagged = false;\n                tile.content = -10;\n            }\n        })\n        newBoard[boom].content = -2\n        setBoard(newBoard)\n        setGameState(\"lost\")\n    }\n\n    function gameWon() {\n        const newBoard = [...board];\n        newBoard.forEach(tile => {\n            if (tile.content === -1)\n                tile.isFlagged = true;\n        })\n        setBoard(newBoard)\n        setGameState(\"won\")\n    }\n\n    let clicks = 0\n    function handleClick() {\n        if (settingsOpen) return\n        clicks++\n        if (clicks == 2) {\n            clicks = 0\n            openSettings()\n        }\n        setTimeout(function () {\n            if (clicks == 1) {\n                restart()\n                clicks = 0\n            }\n        }, 150);\n    }\n\n    const restart = () => {\n        const newBoard = generateBoard(gameConfig.width, gameConfig.height, gameConfig.mines);\n        setBoard(newBoard)\n        setGameState('ready')\n        setOpened(0);\n        setFlagged(0);\n        setTimer(0)\n    }\n    const openSettings = () => {\n        console.log(\"open settings\")\n        setSettingsOpen(!settingsOpen)\n    }\n\n    const closeSettings = () => {\n        console.log(\"closing..\")\n        setSettingsOpen(!settingsOpen)\n    }\n    // const onChangeValue = (evt) => {\n    //     console.log(evt.target.value)\n    // }\n\n    const settingsChanged = (evt) => {\n        evt.preventDefault();\n        const setting = evt.target.elements.setting.value;\n        if (setting === \"\") {\n            setSettingsOpen(false);\n            return;\n        }\n        console.log('changing settings ==>', setting)\n\n\n        let newConf = {}\n        if (setting == 'custom') {\n\n            newConf.width = parseInt(evt.target.elements.cW.value);\n            if (newConf.width != newConf.width || newConf.width < 5) newConf.width = 5;\n            newConf.width = Math.min(30, newConf.width);\n            // if (newConf.width > 30) newConf.width = 30\n\n            newConf.height = parseInt(evt.target.elements.cH.value);\n            if (newConf.height != newConf.height || newConf.height < 5) newConf.height = 5;\n            newConf.height = Math.min(30, newConf.height);\n            // if (newConf.height > 30) newConf.height = 30\n\n            newConf.mines = parseInt(evt.target.elements.cM.value);\n            if (newConf.mines != newConf.mines || newConf.mines < 5) newConf.mines = 5;\n            if (newConf.mines > newConf.height * newConf.width) newConf.mines = newConf.height * newConf.width - 1\n\n        }\n        else {\n            newConf = { ...conf[setting] }\n        }\n\n        setSettingsOpen(false);\n\n        console.log(newConf)\n        const newBoard = generateBoard(newConf.width, newConf.height, newConf.mines);\n        setBoard(newBoard)\n        setConf(newConf)\n        setGameState('ready')\n        setOpened(0);\n        setFlagged(0);\n        setTimer(0)\n    }\n\n    let status\n    if (gameState === 'lost') status = \"GAME OVER\"\n    else if (gameState === 'ready') status = \"LETS PLAY\"\n    else if (gameState === 'running') status = \"PLAYING\"\n    else if (gameState === 'won') status = \"YOU WIN\"\n\n    return (\n        <div className={classes.minesweeperWrapper}>\n\n            <div className={classes.minesweeper}\n                ref={minesweeperBoard}>\n\n                <GameHeader clicked={handleClick} time={timer} minesLeft={gameConfig.mines - flagged}>\n                    {status}\n                </GameHeader>\n\n                <GameBoard\n                    width={gameConfig.width}\n                    height={gameConfig.height}\n                    board={board}\n                    gameOver={gameState === \"won\" || gameState === \"lost\"}\n                    clicked={revealTileHandler}\n                    right_clicked={flagHandler}\n                />\n            </div>\n            { settingsOpen ? <Settings submitted={settingsChanged} clicked={closeSettings} /> : null}\n        </div>\n    );\n}\n\nexport default Minesweeper;\n\n\n\n//content: can be -1 for bomb or a number >= 0 showing neighbouring bombs\n//neighbours: an array with neighbouring squares (3-8)\n//isOpen: has the player revealed this square?\n//isFlagged ??? has the player flagged it (right click)\nclass Tile {\n    constructor(content) {\n        this.content = content;\n        this.isOpen = false;\n        this.isFlagged = false;\n        this.neighbours = [];\n    }\n}\n\n\nfunction generateBoard(width, height, mines) {\n    console.log(`MAKING BOARD ${width}x${height} with ${mines} mines`)\n    const max = width * height;\n    const board = new Array(max).fill(null)\n\n    for (let i = 0; i < max; i++) {\n        const newSquare = new Tile(0);\n        board[i] = newSquare;\n        const newNeighbours = [];\n        //find neighbours\n        //top-left\n        if (i >= width && i % width !== 0) newNeighbours.push(i - width - 1)\n        //top\n        if (i >= width) newNeighbours.push(i - width)\n        //top-right\n        if (i >= width && i % width !== width - 1) newNeighbours.push(i - width + 1)\n        //right\n        if (i % width !== width - 1) newNeighbours.push(i + 1)\n        //bottom-right\n        if (i < max - width && i % width !== width - 1) newNeighbours.push(i + width + 1)\n        //bottom\n        if (i < max - width) newNeighbours.push(i + width)\n        //bottom-left\n        if (i < max - width && i % width !== 0) newNeighbours.push(i + width - 1)\n        //left\n        if (i % width !== 0) newNeighbours.push(i - 1)\n\n        newSquare.neighbours = newNeighbours;\n    }\n\n    //set up mines\n    let i = 1;\n\n    while (i <= mines) {\n        let pos = Math.floor(Math.random() * max);\n        //if theres a bomb there continue and get a new pos\n        if (board[pos].content === -1) continue;\n        //set new bomb\n        board[pos].content = -1;\n        board[pos].neighbours.forEach(tile => {\n\n            if (board[tile].content !== -1) board[tile].content++\n        })\n        i++\n    }\n    return board\n}","C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\components\\GameHeader\\GameHeader.js",[],"C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\components\\GameBoard\\GameBoard.js",[],"C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\components\\GameBoard\\Square\\Square.js",[],"C:\\Users\\phoeb\\OneDrive\\Desktop\\WD2\\REACT\\minesweeper\\src\\components\\Settings\\Settings.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":43,"column":8,"nodeType":"56","endLine":43,"endColumn":10,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":58,"column":8,"nodeType":"56","endLine":58,"endColumn":16,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":71,"column":33,"nodeType":"62","messageId":"63","endLine":71,"endColumn":35},{"ruleId":"60","severity":1,"message":"64","line":141,"column":20,"nodeType":"62","messageId":"63","endLine":141,"endColumn":22},{"ruleId":"60","severity":1,"message":"64","line":146,"column":24,"nodeType":"62","messageId":"63","endLine":146,"endColumn":26},{"ruleId":"60","severity":1,"message":"64","line":185,"column":21,"nodeType":"62","messageId":"63","endLine":185,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":188,"column":17,"nodeType":"62","messageId":"67","endLine":188,"endColumn":47},{"ruleId":"60","severity":1,"message":"61","line":188,"column":31,"nodeType":"62","messageId":"63","endLine":188,"endColumn":33},{"ruleId":"65","severity":1,"message":"66","line":193,"column":17,"nodeType":"62","messageId":"67","endLine":193,"endColumn":49},{"ruleId":"60","severity":1,"message":"61","line":193,"column":32,"nodeType":"62","messageId":"63","endLine":193,"endColumn":34},{"ruleId":"65","severity":1,"message":"66","line":198,"column":17,"nodeType":"62","messageId":"67","endLine":198,"endColumn":47},{"ruleId":"60","severity":1,"message":"61","line":198,"column":31,"nodeType":"62","messageId":"63","endLine":198,"endColumn":33},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'flagHandler'. Either include it or remove the dependency array.","ArrayExpression",["70"],"React Hook useEffect has missing dependencies: 'gameWon' and 'target'. Either include them or remove the dependency array.",["71"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [flagHandler]",{"range":"76","text":"77"},"Update the dependencies array to be: [gameWon, opened, target]",{"range":"78","text":"79"},[1593,1595],"[flagHandler]",[1946,1954],"[gameWon, opened, target]"]